var Promise = require('any-promise');
function noop() { }
function defaultShouldRetry(request) {
    if (request.errored) {
        return request.errored.code === 'EUNAVAILABLE';
    }
    if (request.response) {
        return request.response.statusType() === 5;
    }
    return false;
}
function popsicleRetry(_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.maxRetries, maxRetries = _c === void 0 ? 5 : _c, _d = _b.retryDelay, retryDelay = _d === void 0 ? 5000 : _d, _e = _b.shouldRetry, shouldRetry = _e === void 0 ? defaultShouldRetry : _e, _f = _b.onRetry, onRetry = _f === void 0 ? noop : _f;
    return function (self) {
        var retries = 0;
        self.always(function (request) {
            if (shouldRetry(request) && retries < maxRetries) {
                return new Promise(function (resolve) {
                    setTimeout(function () {
                        var retry = request.clone();
                        retries++;
                        onRetry(retry);
                        resolve(retry);
                    }, retryDelay);
                })
                    .then(function (response) {
                    request.response = response;
                });
            }
        });
    };
}
module.exports = popsicleRetry;
//# sourceMappingURL=index.js.map